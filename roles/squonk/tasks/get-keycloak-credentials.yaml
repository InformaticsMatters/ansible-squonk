---

# Sets a number of facts: -
#
# - sq_keycloak_hostname_fact (the hostname not the full admin URL)
# - sq_keycloak_url_fact (the full authentication URL, i.e. 'https://hostanme/auth')
# - sq_keycloak_admin_user_fact
# - sq_keycloak_admin_user_password_fact
#
# These are either set from pre-defined variables
# (if 'sq_keycloak_admin_user' has been given a value)
# or extracted from the secrets known to exist in the
# infrastructure namespace. The former is useful
# in connecting to remote (off-cluster) Keycloak instances.

- block:

  # A block that runs if the Keycloak URL ('https://????/auth') has been defined.
  # here we expect an admin user and password.

  - name: Assert variables
    assert:
      that:
      - keycloak_admin|length > 0
      - keycloak_admin_password|length > 0

  - name: Set Keycloak admin facts (from variables)
    set_fact:
      sq_keycloak_hostname_fact: "{{ keycloak_server_url.split('/')[2] }}"
      sq_keycloak_url_fact: "{{ keycloak_server_url }}"
      sq_keycloak_admin_user_fact: "{{ keycloak_admin }}"
      sq_keycloak_admin_user_password_fact: "{{ keycloak_admin_password }}"

  - name: Set Keycloak realm manager facts (from variables)
    set_fact:
      sq_keycloak_realm_manager_fact: "{{ keycloak_realm_manager }}"
      sq_keycloak_realm_manager_password_fact: "{{ keycloak_realm_manager_password }}"

  when: keycloak_server_url|length > 0

- block:

  # A block that runs is the Keycloak URL has not been defined.
  # Here we collect keycloak credentials from the
  # 'well known' fact in the infrastructure namespace
  # that's expected to be on our cluster.

  - name: Assert variables
    assert:
      that:
      - sq_infra_namespace|length > 0

  - name: Get Keycloak secrets (from '{{ sq_infra_namespace }}' namespace)
    k8s_facts:
      kind: Secret
      name: im-keycloak
      namespace: "{{ sq_infra_namespace }}"
    register: k_s_result

  - name: Assert Keycloak secrets
    assert:
      that: k_s_result.resources|length == 1

  - name: Set Keycloak admin facts (from secrets)
    set_fact:
      sq_keycloak_hostname_fact: "{{ k_s_result.resources[0].data.keycloak_hostname|b64decode }}"
      sq_keycloak_url_fact: https://{{ k_s_result.resources[0].data.keycloak_hostname|b64decode }}/auth
      sq_keycloak_admin_user_fact: "{{ k_s_result.resources[0].data.keycloak_admin_user|b64decode }}"
      sq_keycloak_admin_user_password_fact: "{{ k_s_result.resources[0].data.keycloak_admin_user_password|b64decode }}"

  - name: Get Keycloak realm manager secrets (from '{{ sq_infra_namespace }}' namespace)
    k8s_facts:
      kind: Secret
      name: im-keycloak-manager
      namespace: "{{ sq_infra_namespace }}"
    register: krm_s_result

  - name: Assert Keycloak realm manager secrets
    assert:
      that: krm_s_result.resources|length == 1

  - name: Set Keycloak realm manager facts (from secrets)
    set_fact:
      sq_keycloak_realm_manager_fact: "{{ krm_s_result.resources[0].data.keycloak_manager_user|b64decode }}"
      sq_keycloak_realm_manager_password_fact: "{{ krm_s_result.resources[0].data.keycloak_manager_user_password|b64decode }}"

  when: keycloak_server_url|length == 0

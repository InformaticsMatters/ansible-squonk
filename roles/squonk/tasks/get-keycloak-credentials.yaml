---

# Sets two facts: -
#
# - sq_keycloak_admin_user_fact
# - sq_keycloak_admin_user_password_fact
#
# These are either set from pre-defined variables
# (if 'sq_keycloak_admin_user' has been given a value)
# or extracted from the secrets known to exist in the
# infrastructure namespace. The former is useful
# in connecting to remote (off-cluster) Keycloak instances.

- block:

  # Admin user (and password is defined)

  - name: Assert variables
    assert:
      that: sq_keycloak_admin_user_password|length > 0

  - name: Set Keycloak admin facts (from variables)
    set_fact:
      sq_keycloak_admin_user_fact: "{{ keycloak_admin_user }}"
      sq_keycloak_admin_user_password_fact: "{{ keycloak_admin_user_password }}"

  when: sq_keycloak_admin_user|length > 0

- block:

  # Keycloak admin user is not defined.
  # Here we collect keycloak credentials from the
  # 'well known' fact in the infrastructure namespace.

  - name: Get Keycloak secrets (from '{{ sq_infra_namespace }}' namespace)
    k8s_facts:
      kind: Secret
      name: im-keycloak
      namespace: "{{ sq_infra_namespace }}"
    register: k_s_result

  - name: Assert Keycloak secrets
    assert:
      that: k_s_result.resources|length == 1

  - name: Set Keycloak admin facts (from secrets)
    set_fact:
      sq_keycloak_admin_user_fact: "{{ k_s_result.resources[0].data.keycloak_admin_user|b64decode }}"
      sq_keycloak_admin_user_password_fact: "{{ k_s_result.resources[0].data.keycloak_admin_user_password|b64decode }}"

  when: sq_keycloak_admin_user|length == 0

---

- name: Remove any existing migration Job
  k8s:
    state: absent
    definition: "{{ lookup('template', 'job-flyway.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

# Delete the Pods left behind that are Completed ('Succeeded').
# Kubernetes *DOES NOT* remove these Job-based Pods automatically
# (see https://kubernetes.io/docs/concepts/workloads/controllers/job/).
# Instead completed Jobs need to be removed manually by the user.
# The logic that follows list all Jobs (Pods)
# that have Succeeded and then deletes them.

- name: Get Succeeded Migration Pods
  k8s_info:
    kind: Pod
    namespace: "{{ sq_namespace }}"
    label_selectors:
    - name=postgres-migrate
    field_selectors:
    - status.phase=Succeeded
  register: pods_result

- name: Delete Succeeded Migration Pods
  k8s:
    kind: Pod
    namespace: "{{ sq_namespace }}"
    name: "{{ item.metadata.name }}"
    state: absent
  loop: "{{ pods_result.resources }}"
  when: pods_result.resources|length > 0

# All clean - start a new Job

- name: Launch new migration Job
  k8s:
    definition: "{{ lookup('template', 'job-flyway.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

- name: Wait for migration
  k8s_info:
    kind: Job
    namespace: "{{ sq_namespace }}"
    name: postgres-migrate
  register: result
  until: >-
    result.resources[0].status.completionTime is defined
    or result.resources[0].status.failed is defined
  delay: 4
  retries: "{{ (wait_timeout|int / 4)|int }}"

- name: Display Job status
  debug:
    var: result.resources[0].status

- name: Assert migration success
  assert:
    that:
    - result.resources[0].status.succeeded is defined
    - result.resources[0].status.succeeded == 1
    - result.resources[0].status.failed is not defined

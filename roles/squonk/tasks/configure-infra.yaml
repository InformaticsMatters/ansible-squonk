---

- import_tasks: get-keycloak-credentials.yaml

# Create the keycloak clients
# We have a client for the Portal (the web application)
# and one for the JobExecutor...

- name: Add Keycloak JobExecutor client
  keycloak_client:
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ sq_keycloak_url_fact }}"
    auth_realm: master
    auth_username: "{{ sq_keycloak_admin_user_fact }}"
    auth_password: "{{ sq_keycloak_admin_user_password_fact }}"
    realm: "{{ sq_keycloak_realm }}"
    client_id: "{{ sq_je_keycloak_client_id }}"
    name: Squonk JobExecutor
    protocol: openid-connect
    base_url: https://{{ sq_je_hostname }}
    admin_url: https://{{ sq_je_hostname }}
    redirect_uris:
    - https://{{ sq_je_hostname }}/jobexecutor/*
    - http://{{ sq_je_hostname }}/jobexecutor/*
    public_client: yes
    service_accounts_enabled: yes
    direct_access_grants_enabled: yes
    standard_flow_enabled: yes
    default_roles:
    - standard-user
  delegate_to: localhost
  when: sq_je_hostname|string|length > 0

- name: Add Keycloak Portal (Notebook) client
  keycloak_client:
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ sq_keycloak_url_fact }}"
    auth_realm: master
    auth_username: "{{ sq_keycloak_admin_user_fact }}"
    auth_password: "{{ sq_keycloak_admin_user_password_fact }}"
    realm: "{{ sq_keycloak_realm }}"
    client_id: "{{ sq_portal_keycloak_client_id }}"
    name: Squonk Computational Notebook
    protocol: openid-connect
    base_url: https://{{ sq_portal_hostname }}
    admin_url: https://{{ sq_portal_hostname }}
    redirect_uris:
    - https://{{ sq_portal_hostname }}/portal/*
    - http://{{ sq_portal_hostname }}/portal/*
    - "{{ sq_portal_logout_redirect_to }}/*"
    client_authenticator_type: client-secret
    secret: "{{ sq_portal_keycloak_client_secret }}"
    public_client: no
    direct_access_grants_enabled: no
    standard_flow_enabled: yes
    default_roles:
    - standard-user
  delegate_to: localhost
  when: sq_portal_hostname|string|length > 0

# we must create a database for use by Squonk.
# This is handled by our infrastructure-data Role.
#
# Assuming database credentials do not already exist.

- name: Get database secrets
  k8s_facts:
    kind: Secret
    name: database-secrets-squonk
    namespace: "{{ sq_namespace }}"
  register: secret_result

- name: Create infrastructure database for Squonk
  include_role:
    name: informaticsmatters.infrastructure_data
  vars:
    id_action: create
    id_infra_namespace: "{{ sq_infra_namespace }}"
    id_db: squonk
    id_db_user_namespace: "{{ sq_namespace }}"
    id_db_user_namespace_sa: "{{ sq_namespace_service_account }}"
    id_db_user: squonk
    id_db_user_password: "{{ sq_db_password }}"
  when: secret_result.resources|length == 0

- import_tasks: infra-db-migration.yaml

# Create 'Day 1' Keycloak users

- name: Create infrastructure 'Day 1' Squonk users
  include_role:
    name: informaticsmatters.infrastructure_user
  vars:
    iu_action: create
    iu_hostname: "{{ sq_keycloak_hostname_fact }}"
    iu_realm: "{{ sq_keycloak_realm }}"
    iu_realm_manager: "{{ sq_keycloak_realm_manager_fact }}"
    iu_realm_manager_password: "{{ sq_keycloak_realm_manager_password_fact }}"
    iu_users: "{{ sq_day1_users }}"
  when: sq_day1_users|length > 0

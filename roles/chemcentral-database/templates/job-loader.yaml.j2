---
kind: Job
apiVersion: batch/v1
metadata:
  name: loader
  namespace: {{ ccd_namespace }}
spec:
  selector:
    name: loader
  template:
    metadata:
      labels:
        name: loader
    spec:
      serviceAccountName: ccd

      # Must be a 'core' node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: informaticsmatters.com/purpose
                operator: In
                values:
                - core

      # The initContainers section simply invokes our S3 loader image
      # which is responsible for synchronising the chosen S3
      # data with the container's '/data' directory, which it
      # shares with the ChemCentral loader.
      initContainers:
      - name: ccd-s3-downloader
        image: "{{ ccd_s3_loader_image_registry }}/{{ ccd_s3_loader_image }}:{{ ccd_s3_loader_image_tag }}"
{% if ccd_s3_loader_image_tag in ['latest', 'stable'] %}
        imagePullPolicy: Always
{% else %}
        imagePullPolicy: Always
{% endif %}
        terminationMessagePolicy: FallbackToLogsOnError
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-secrets
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-secrets
              key: aws_secret_access_key
        - name: AWS_DEFAULT_REGION
          value: "{{ aws_default_region }}"
        - name: AWS_BUCKET
          value: "{{ ccd_bucket }}"
        - name: AWS_BUCKET_PATH
          value: "{{ ccd_bucket_path }}"
        - name: SYNC_PATH
          value: "{{ ccd_loader_path }}"
        - name: GRAPH_WIPE
          value: "no"
        - name: CYPHER_ROOT
          value: ""
        resources:
          limits:
            cpu: {{ ccd_s3_loader_cpu_limit }}
            memory: {{ ccd_s3_loader_mem_limit }}
          requests:
            cpu: {{ ccd_s3_loader_cpu_request }}
            memory: {{ ccd_s3_loader_mem_request }}
        volumeMounts:
        - mountPath: /data
          name: data-dir
{% if ccd_s3_endpoint %}
        - name: s3-config
          mountPath: /home/loader/.aws/config
          subPath: config
{% endif %}

      containers:
      - name: ccd-loader-{{ ccd_loader_marker }}
        image: {{ ccd_database_image_registry }}/squonk/chemcentral-loader:{{ ccd_database_loader_image_tag }}
{% if ccd_database_loader_image_tag in ['latest', 'stable'] %}
        imagePullPolicy: Always
{% else %}
        imagePullPolicy: IfNotPresent
{% endif %}
        terminationMessagePolicy: FallbackToLogsOnError
        args:
        - {{ ccd_loader_class }}
        env:
        - name: CHEMCENTRAL_HOST
          value: database
        - name: CHEMCENTRAL_USER
          value: chemcentral
        - name: CHEMCENTRAL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: chemcentral_user_password
        - name: CHEMCENTRAL_PORT
          value: '5432'
        - name: CHEMCENTRAL_DATABASE
          value: chemcentral
        - name: CHEMCENTRAL_SCHEMA
          value: vendordbs
{% if ccd_loader_table_name %}
        # The table name has a default for each loader class.
        # Be explicit if it's set.
        - name: CHEMCENTRAL_TABLE
          value: {{ ccd_loader_table_name }}
{% endif %}
        - name: CHEMCENTRAL_LOADER_FILE
          value: /data/{{ ccd_loader_file }}
        - name: CHEMCENTRAL_LOADER_DIR
          value: /data/{{ ccd_loader_path }}
        - name: CHEMCENTRAL_LOADER_PATTERN
          value: '{{ ccd_loader_pattern }}'
        - name: CHEMCENTRAL_LIMIT
          value: '{{ ccd_loader_limit }}'
        - name: CHEMCENTRAL_REPORTING_CHUNK
          value: '{{ ccd_loader_reporting_chunk }}'
        resources:
          limits:
            cpu: {{ ccd_loader_cpu_limit }}
            memory: {{ ccd_loader_mem_limit }}
          requests:
            cpu: {{ ccd_loader_cpu_request }}
            memory: {{ ccd_loader_mem_request }}
        volumeMounts:
        - mountPath: /data
          name: data-dir

      volumes:
      - name: data-dir
        persistentVolumeClaim:
          claimName: loader
{% if ccd_s3_endpoint %}
      - name: s3-config
        configMap:
          name: s3-config
{% endif %}

      restartPolicy: Never
